package com.healthme.app.service;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.UUID;import com.healthme.app.AppContext;import com.healthme.app.common.StringUtils;import com.healthme.message.BLEMessage;import com.healthme.message.MessageParser;import com.healthme.message.MessageType;import com.healthme.message.SimpleMessageParser;import android.app.Service;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothGatt;import android.bluetooth.BluetoothGattCallback;import android.bluetooth.BluetoothGattCharacteristic;import android.bluetooth.BluetoothGattDescriptor;import android.bluetooth.BluetoothGattService;import android.bluetooth.BluetoothManager;import android.bluetooth.BluetoothProfile;import android.content.Context;import android.content.Intent;import android.os.Binder;import android.os.Handler;import android.os.IBinder;import android.util.Log;import android.widget.Toast;/* * 管理蓝牙的服务  * 			功能：  *			    1) 连接蓝牙设备 *				2) 管理连接状态 *				3) 获取蓝牙设备的相关服务 * * @author Kevin.wu *  */public final class RFStarBLEService extends Service {	public final static String TAG = "RFStarBLEService";	public final static String ACTION_GATT_CONNECTED = "com.healthme.app.service.ACTION_GATT_CONNECTED";	public final static String ACTION_GATT_CONNECTING = "com.healthme.app.service.ACTION_GATT_CONNECTING";	public final static String ACTION_GATT_DISCONNECTED = "com.healthme.app.service.ACTION_GATT_DISCONNECTED";	public final static String ACTION_GATT_SERVICES_DISCOVERED = "com.healthme.app.service.ACTION_GATT_SERVICES_DISCOVERED";	public final static String ACTION_DATA_AVAILABLE = "com.healthme.app.service.ACTION_DATA_AVAILABLE";	public final static String EXTRA_DATA = "com.healthme.app.service.EXTRA_DATA";	public final static String DEV_MAC = "com.healthme.app.service.DEV_MAC";	public final static String ACTION_GAT_RSSI = "com.healthme.app.service.RSSI";	public final static String RFSTAR_CHARACTERISTIC_ID = "com.healthme.app.service.characteristic"; // 唯一标识		public final static String DATA_UUID_SERVICE = "fff0";	public final static String DATA_CHARAC_RECEIVE = "fff1";	public final static String DATA_CHARAC_SEND = "fff2";	//public final static String CHARACTERISTIC_UUID = "FFE9";    public final static UUID UUID_CLIENT_CHARACTERISTIC_CONFIG =     		UUID.fromString("00002902-0000-1000-8000-00805f9b34fb");	public final static int TIMEOUT = 10000;		private AppContext appContext;	private BluetoothAdapter bleAdapter;	private final IBinder kBinder = new LocalBinder();	private static ArrayList<BluetoothGatt> arrayGatts = new ArrayList<BluetoothGatt>(); // 存放BluetoothGatt的集合	private BluetoothDevice curBleDevice;		private Handler handler;		private Map<Byte,OnReceiveDataListener> callbacks=new HashMap<Byte,OnReceiveDataListener>();	private OnReceiveDataListener onRecADdata;	private OnReceiveDataListener onRec3Xdata;	private OnReceiveDataListener onLeadLoss;	private OnReceiveDataListener onBatLow;    private OnReceiveDataListener actionCallback;//    private OnReceiveDataListener onEnableBLE;//    private OnReceiveDataListener onEnableFlash;		private MessageParser messageParser=new SimpleMessageParser();		private BleScanThread bleScanThread;		private boolean enable=true;	public final static int STATUS_PREPARE_CONNECT=1;  //准备连接	public final static int STATUS_CONNECT=2;   //已连接	public final static int STATUS_DISCONNECT=3;  //断开连接	public final static int STATUS_TRANSPORT=4;   //传输中		@Override	public void onCreate(){		super.onCreate();		Log.i(TAG, "######onCreate");		appContext=(AppContext)getApplicationContext();		handler=new Handler();		BluetoothManager manager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);		bleAdapter = manager.getAdapter();		enable=true;		tryScanBleDevice();	}		public int onStartCommand(Intent intent,int flags,int startId){		Log.i(TAG, "onStartCommand");		return super.onStartCommand(intent, flags, startId);	}	@Override	public IBinder onBind(Intent intent) {		// TODO Auto-generated method stub		Log.i(TAG, "######onBind");		return kBinder;	}	@Override	public boolean onUnbind(Intent intent) {		// TODO Auto-generated method stub		Log.i(TAG, "######onUnbind");				return super.onUnbind(intent);	}		public void stopAll(){		Log.i(TAG, "stopAll");		enable=false;		if(bleScanThread!=null){			bleScanThread.cancel();			bleScanThread=null;		}		disConnectBle();		clearAllBLEListener();		Log.i(TAG, "stopAll finished");	}		@Override	public void onDestroy(){		if(enable){			stopAll();		}		super.onDestroy();		Log.i(TAG, "######onDestroy");	}		private BluetoothGattCallback bleGattCallback = new BluetoothGattCallback() {		/*		 * 连接的状发生变化 (non-Javadoc)		 * 		 * @see		 * android.bluetooth.BluetoothGattCallback#onConnectionStateChange(android		 * .bluetooth.BluetoothGatt, int, int)		 */		@Override		public void onConnectionStateChange(BluetoothGatt gatt, int status,				int newState) {			Log.i(TAG, "onConnectionStateChange received: " + newState);			if(!enable){				gatt.close();			}			String action = null;			if (newState == BluetoothProfile.STATE_CONNECTED) {				action = ACTION_GATT_CONNECTED;                Log.i(TAG,"BLE Connected!");				gatt.discoverServices();			} else if (newState == BluetoothProfile.STATE_DISCONNECTED) {				action = ACTION_GATT_DISCONNECTED;				Log.i(TAG,"###########GAT CLOSE");				onBleDisconnnect(gatt.getDevice());			}//			if (action != null && !action.equals("")) {//				broadcastUpdate(gatt.getDevice().getAddress(), action);//			}		}		/*		 * 搜索device中的services (non-Javadoc)		 * 		 * @see		 * android.bluetooth.BluetoothGattCallback#onServicesDiscovered(android		 * .bluetooth.BluetoothGatt, int)		 */		@Override		public void onServicesDiscovered(BluetoothGatt gatt, int status) {			Log.i(TAG, "onServicesDiscovered received: " + status);			if(!enable){				gatt.close();			}			if (status == BluetoothGatt.GATT_SUCCESS){				for(BluetoothGattService serv:gatt.getServices()){					String serviceUUID = Long.toHexString(serv.getUuid().getMostSignificantBits())					.substring(0, 4);					Log.i(TAG,"discovere service:"+serviceUUID);				}				handler.postDelayed(new Runnable() {					@Override					public void run() {						setCharacteristicNotification(curBleDevice,DATA_UUID_SERVICE, DATA_CHARAC_RECEIVE, true);						sleep(2000);						writeValue(curBleDevice,DATA_UUID_SERVICE,DATA_CHARAC_SEND,new byte[]{BLEMessage.START_BLE_TRANSFER});					}},1000);			}//			if (status == BluetoothGatt.GATT_SUCCESS) {//				broadcastUpdate(gatt.getDevice().getAddress(), ACTION_GATT_SERVICES_DISCOVERED);//			} else {//				Log.w(TAG, "onServicesDiscovered received: " + status);//			}		}		/*		 * 读取特征值 (non-Javadoc)		 * 		 * @see		 * android.bluetooth.BluetoothGattCallback#onCharacteristicRead(android		 * .bluetooth.BluetoothGatt,		 * android.bluetooth.BluetoothGattCharacteristic, int)		 */		public void onCharacteristicRead(BluetoothGatt gatt,				android.bluetooth.BluetoothGattCharacteristic characteristic,				int status) {			Log.d(TAG, "onCharacteristicRead received: " + status);			if(!enable){				gatt.close();			}						readBluetoothGattCharacteristic(gatt,characteristic);			//			if (status == BluetoothGatt.GATT_SUCCESS) {//				broadcastUpdate(gatt.getDevice().getAddress(), ACTION_DATA_AVAILABLE, characteristic);//			} else {//				//Log.i(TAG, "onCharacteristicRead received: " + status);//			}		}		/*		 * 特征值的变化 (non-Javadoc)		 * 		 * @see		 * android.bluetooth.BluetoothGattCallback#onCharacteristicChanged(android		 * .bluetooth.BluetoothGatt,		 * android.bluetooth.BluetoothGattCharacteristic)		 */		public void onCharacteristicChanged(BluetoothGatt gatt,				android.bluetooth.BluetoothGattCharacteristic characteristic) {			Log.d(TAG, "onCharacteristicChanged received: ");			if(!enable){				gatt.close();			}			readBluetoothGattCharacteristic(gatt,characteristic);//			broadcastUpdate(gatt.getDevice().getAddress(), ACTION_DATA_AVAILABLE, characteristic);		}		/*		 * 读取信号 (non-Javadoc)		 * 		 * @see		 * android.bluetooth.BluetoothGattCallback#onReadRemoteRssi(android.		 * bluetooth.BluetoothGatt, int, int)		 */		public void onReadRemoteRssi(BluetoothGatt gatt, int rssi, int status) {			Log.d(TAG, "onReadRemoteRssi received: ");			if(!enable){				gatt.close();			}			if (gatt.connect()) {//				broadcastUpdate(gatt.getDevice().getAddress(), ACTION_GAT_RSSI);				Log.i(TAG, "onReadRemoteRssi  : " + rssi);			}		}	};		/**	 * 发送带蓝牙信息的到广播	 * 	 * @param gatt	 * @param characteristic	 */	private void readBluetoothGattCharacteristic(BluetoothGatt gatt,BluetoothGattCharacteristic characteristic) {		String serviceUUID = Long.toHexString(				characteristic.getService().getUuid().getMostSignificantBits())				.substring(0, 4);		String characteristicUUID = Long.toHexString(characteristic.getUuid().getMostSignificantBits()).substring(0,4);				final byte[] data = characteristic.getValue();				Log.v(TAG,serviceUUID+":"+characteristicUUID+" receive: "+StringUtils.byteArray2String(data));				if (data != null && data.length > 0) {			onReceiveData(serviceUUID,characteristicUUID,data);		}	}		public BluetoothDevice getCurBleDevice(){		return curBleDevice;	}			public boolean connectBle(BluetoothDevice device){		if(!enable){			return false;		}		if(curBleDevice!=null&&curBleDevice.equals(device)){			Log.i(TAG,curBleDevice.getAddress()+" 处于连接状态");			if (connectStaustListener != null){				connectStaustListener.currentStatus(STATUS_CONNECT,"connected");			}			return true;		}		BluetoothGatt gatt = getBluetoothGatt(device);		if (gatt != null) {//			Log.i(TAG, "重新连接蓝牙设备: " + gatt.getDevice().getAddress());//			if (gatt.connect()) {//				// 已经连接上//				Log.i(TAG, "重新连接成功");//				//				this.curBleDevice=device;//				setCharacteristicNotification(curBleDevice,"ffe0", "ffe4", true);//				sleep(10);//				writeValue(curBleDevice,DATA_UUID_SERVICE,CHARACTERISTIC_UUID,new byte[]{BLEMessage.START_BLE_TRANSFER});//				return true;//			} else {//				Log.i(TAG, "重新连接失败");				closeGatt(gatt);//				sleep(1000);//			}		}		curBleDevice=device;		Log.i(TAG, "正准备新连接: "+device.getAddress());		if (connectStaustListener != null){			connectStaustListener.currentStatus(STATUS_PREPARE_CONNECT,"Waiting for connect");		}		gatt = device.connectGatt(this, false, bleGattCallback);		arrayGatts.add(gatt);		return true;	}	public void disConnectBle(){		curBleDevice=null;		for(int i=arrayGatts.size()-1;i>=0;i--){			BluetoothGatt gatt=arrayGatts.get(i);			closeGatt(gatt);		}		tryScanBleDevice();	}	private void onBleDisconnnect(BluetoothDevice device){		BluetoothGatt gatt = getBluetoothGatt(device);		if (gatt == null) {			Log.i(TAG, device.getAddress() + " 连接已断开");			if (connectStaustListener != null){				connectStaustListener.currentStatus(STATUS_DISCONNECT,"Disconnect");			}			return;		}				closeGatt(gatt);				if(curBleDevice!=null&&curBleDevice.equals(device)){			curBleDevice=null;			if(enable){				tryScanBleDevice();			}		}	}		public void tryScanBleDevice(){		if(!enable)return;		if(appContext.getBluetoothDevice()==null)return;		if(curBleDevice!=null&&curBleDevice.getAddress().equals(appContext.getBluetoothDevice().getAddress())){			return;		}		if(bleScanThread!=null){			bleScanThread.cancel();		}		bleScanThread=new BleScanThread(){			@Override			public void onDeviceScanned(final BluetoothDevice device){				connectBle(device);			}		};		bleScanThread.start();	}		private void closeGatt(final BluetoothGatt gatt){		if(gatt==null)return;		Log.i(TAG, "断开连接: " + gatt.getDevice().getAddress());		if (connectStaustListener != null){			connectStaustListener.currentStatus(STATUS_DISCONNECT,"Disconnect" );		}		arrayGatts.remove(gatt);				gatt.disconnect();		sleep(20);		gatt.close();		sleep(10);	}	public class LocalBinder extends Binder {		public RFStarBLEService getService() {			return RFStarBLEService.this;		}	}			private void onReceiveData(String serviceId,String characteristicId,byte[] data){		if(DATA_UUID_SERVICE.equals(serviceId)){			List<BLEMessage> messages = messageParser.parse(data);						for (BLEMessage bleMessage : messages) {				switch (bleMessage.type) {				case BLEMessage.AD_DATA:					if(onRecADdata!=null)onRecADdata.onReceiveData(bleMessage);					break;				case BLEMessage.AXIS_DATA:					if(onRec3Xdata!=null)onRec3Xdata.onReceiveData(bleMessage);					break;				case BLEMessage.LOW_BAT_WARN:					if(onBatLow!=null)onBatLow.onReceiveData(bleMessage);					break;				case BLEMessage.LEAD_LOST_WARN:					if(onLeadLoss!=null)onLeadLoss.onReceiveData(bleMessage);					break;				case BLEMessage.SN_QUERY:                case BLEMessage.START_BLE_TRANSFER:                case BLEMessage.STOP_BLE_TRANSFER:                case BLEMessage.START_FLASH_WRITE:                case BLEMessage.STOP_FLASH_WRITE:					//if(onRecADdata!=null)onRecADdata.onReceiveData(bleMessage);//					replyMessage(MessageType.SN_QUERY,bleMessage);                    actionCallback.onReceiveData(bleMessage);					break;				default:					break;				}			}					}		else if("180f".equals(serviceId)){			if("2a19".equals(characteristicId)){				BLEMessage msg=new BLEMessage();				msg.setData(byteArr2Numberlist(data));				replyMessage(MessageType.BAT_REPLY,msg);			}		}				//while(true);	}		private void replyMessage(byte type,BLEMessage bleMessage){		for(int i=callbacks.size()-1;i>=0;i--){			OnReceiveDataListener callback=callbacks.get(i);			if(callback.messageType==type){				if(callback.enable)					callback.onReceiveData(bleMessage);				callbacks.remove(callback);			}		}	}		private BluetoothGattCharacteristic findGattCharacteristic(BluetoothDevice device,String serviceUUID,String characteristicUUID){		for (BluetoothGattService bluetoothGattService : getSupportedGattServices(device)) {			String gattServiceUUID = Long.toHexString(					bluetoothGattService.getUuid().getMostSignificantBits())					.substring(0, 4);			if (!serviceUUID.equalsIgnoreCase(gattServiceUUID))				continue;			for (BluetoothGattCharacteristic bluetoothGattCharacteristic : bluetoothGattService					.getCharacteristics()) {				String characterUUID = Long.toHexString(						bluetoothGattCharacteristic.getUuid()								.getMostSignificantBits()).substring(0, 4);				if (characteristicUUID.equalsIgnoreCase(characterUUID)) {					return bluetoothGattCharacteristic;				}			}		}		return null;	}	public void readValue(BluetoothDevice device,String serviceUUID,String characteristicUUID){		BluetoothGattCharacteristic characteristic=findGattCharacteristic(device, serviceUUID, characteristicUUID);		if(characteristic!=null){			readValue(device, characteristic);		}	}	public void readValue(BluetoothDevice device,			BluetoothGattCharacteristic characteristic) {		// TODO Auto-generated method stub		BluetoothGatt gatt = getBluetoothGatt(device);		if (gatt == null) {			Log.w("", "kBluetoothGatt 为没有初始化，所以不能读取数据");			return;		}		gatt.readCharacteristic(characteristic);	}	public void writeValue(BluetoothDevice device,String serviceUUID,String characteristicUUID,byte[] data){		BluetoothGattCharacteristic characteristic=findGattCharacteristic(device, serviceUUID, characteristicUUID);		if(characteristic!=null){			characteristic.setValue(data);			writeValue(device, characteristic);		}	}	public void writeValue(BluetoothDevice device,			BluetoothGattCharacteristic characteristic) {		// TODO Auto-generated method stub		Log.i(TAG, "writeValue: " + StringUtils.byteArray2String(characteristic.getValue()));		BluetoothGatt gatt = getBluetoothGatt(device);		if (gatt == null) {			Log.w(TAG, "kBluetoothGatt 为没有初始化，所以不能写入数据");			return;		}		Log.i(TAG, "writeValue: " + StringUtils.byteArray2String(characteristic.getValue())+" "+gatt.writeCharacteristic(characteristic));	}	public void setCharacteristicNotification(BluetoothDevice device,String serviceUUID,String characteristicUUID, boolean enable) {		BluetoothGattCharacteristic characteristic=findGattCharacteristic(device, serviceUUID, characteristicUUID);		if(characteristic!=null){			setCharacteristicNotification(device, characteristic, enable);		}	}	public void setCharacteristicNotification(BluetoothDevice device,			BluetoothGattCharacteristic characteristic, boolean enable) {		// TODO Auto-generated method stub		BluetoothGatt gatt = getBluetoothGatt(device);		if (gatt == null) {			Log.w(TAG, "kBluetoothGatt 为没有初始化，所以不能发送使能数据");			return;		}		Log.i(TAG, " notification success  : "				+ characteristic.getUuid().toString() + " " + enable);		gatt.setCharacteristicNotification(characteristic, enable);		        BluetoothGattDescriptor descriptor = characteristic.getDescriptor(UUID_CLIENT_CHARACTERISTIC_CONFIG);        if(descriptor == null)        	return ;                byte[] data;        if(enable)        	data = BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE;        else         	data = BluetoothGattDescriptor.DISABLE_NOTIFICATION_VALUE;                if(!descriptor.setValue(data))        	return;        gatt.writeDescriptor(descriptor);	}	/**	 * 获取services	 * 	 * @return	 */	public List<BluetoothGattService> getSupportedGattServices(			BluetoothDevice device) {		BluetoothGatt gatt = getBluetoothGatt(device);		if (gatt == null) {			Log.e(TAG, "gattservices is null ");			new Exception("######").printStackTrace();			return new ArrayList<BluetoothGattService>();		}		return gatt.getServices();	}	// 从arrayGatts匹配出与device中address想同的BluetoothGatt	private BluetoothGatt getBluetoothGatt(BluetoothDevice device) {		BluetoothGatt gatt = null;		for (BluetoothGatt tmpGatt : arrayGatts) {			if (tmpGatt.getDevice().getAddress().equals(device.getAddress())) {				gatt = tmpGatt;			}		}		return gatt;	}		/**	 * AD 数据	 * @param callback	 */	public void setOnRecADdata(OnReceiveDataListener callback){		this.onRecADdata=callback;	}		/**	 * 三轴 数据	 * @param callback	 */	public void setOnRec3Xdata(OnReceiveDataListener callback){		this.onRec3Xdata=callback;	}		/**	 * 电极脱落	 * @param callback	 */	public void setOnLeadLoss(OnReceiveDataListener callback){		this.onLeadLoss=callback;	}		/**	 * 低电量警告	 * @param callback	 */	public void setOnBatLow(OnReceiveDataListener callback){		this.onBatLow=callback;	}    /**     * 设置命令回调接口，如果开始/停止蓝牙/Flash     * @param callback     */    public void setActionCallback(OnReceiveDataListener callback){        this.actionCallback=callback;    }//    /**//     * 开启Flash//     * @param callback//     *///    public void setOnEnableFlash(OnReceiveDataListener callback){//        this.onEnableFlash=callback;//    }	public void clearAllBLEListener(){		this.onRecADdata=null;		this.onRec3Xdata=null;		this.onLeadLoss=null;		this.onBatLow=null;	}		/**	 * 查询SN	 * @param callback	 */	public void querySN(OnReceiveDataListener callback){		if(callback!=null&&curBleDevice!=null){			callback.messageType=MessageType.SN_QUERY;			callbacks.put(MessageType.SN_QUERY,callback);//			handler.postDelayed(new Runnable(){//				public void run(){//					callbacks.remove(callback);//				}//			}, TIMEOUT);			writeValue(curBleDevice,RFStarBLEService.DATA_UUID_SERVICE, RFStarBLEService.DATA_CHARAC_SEND, new byte[]{MessageType.SN_QUERY, MessageType.END_FLAG});        }			}		/**	 * 查询电量	 * @param callback	 */	public void queryCharge(final OnReceiveDataListener callback){//		if(callback!=null){//			callback.messageType=MessageType.BAT_REPLY;//			callbacks.add(callback);////			handler.postDelayed(new Runnable(){////				public void run(){////					callbacks.remove(callback);////				}////			}, TIMEOUT);//		}		if(curBleDevice!=null){			readValue(curBleDevice,"180f", "2a19");			setCharacteristicNotification(curBleDevice,"180f", "2a19", true);		}			}		/**	 * 开始/停止控制信息	 * @param callback	 */	public void sendCtrlMsg(BLEMessage ctrMessage,OnReceiveDataListener callback){			}			private static List<Number> byteArr2Numberlist(byte[] arr){		List<Number> list=new ArrayList<Number>();		for(byte b:arr){			list.add(b);		}		return list;	}		private void sleep(long ms){		try{			if(ms>0)				Thread.sleep(ms);		}		catch(Exception e){			Log.e(TAG, e.toString());		}	}		public static class OnReceiveDataListener{		private byte messageType;		private boolean enable=true;				public void onReceiveData(BLEMessage msg){			Log.i(TAG, "receive:"+String.valueOf(msg.getData()));		}				public void disable(){			this.enable=false;		}	}	private abstract class BleScanThread extends Thread implements			BluetoothAdapter.LeScanCallback {		private List<BluetoothDevice> scannedDevice = new ArrayList<BluetoothDevice>();		private String mac;		private boolean enable = true;		private boolean scanning = false;		private Object scanLock=new Object();				private final static int SCAN_PERIOD = 10000;		@Override		public void run() {			if(appContext.getBluetoothDevice()!=null)				mac=appContext.getBluetoothDevice().getAddress();			if(mac==null){				Log.e(TAG,"i do not know which device you need. exit.");				return;			}						while (enable) {								try {										synchronized (scanLock) {						scanLeDevice(true);												if (enable) {							Log.i(TAG, "wait for notifying");							scanLock.wait();							Log.i(TAG, "notify end");						}					}					if (enable) {						Log.i(TAG, "sleep 2s");						sleep(2000);					}				} catch (Exception e) {					Log.e(TAG, "BleScanThread:" + e);				}			}		}		private void notifyScan() {			try {				synchronized (scanLock) {					Log.i(TAG, "notifyScan");					scanLock.notifyAll();				}			} catch (Exception e) {				Log.e(TAG, e.toString());			}		}		public void cancel() {			enable=false;			if(scanning)				scanLeDevice(false);			notifyScan();		}		private void scanLeDevice(final boolean enable) {			if (enable) {				if (scanning) {					return;				}				scanning = true;				// Stops scanning after a pre-defined scan period.				handler.postDelayed(new Runnable() {					@Override					public void run() {						scanLeDevice(false);					}				}, SCAN_PERIOD);				Log.i(TAG, "start scan...");				scannedDevice.clear();				bleAdapter.startLeScan(BleScanThread.this);			} else {				Log.i(TAG, "stop scan...");				bleAdapter.stopLeScan(BleScanThread.this);				scanning = false;				notifyScan();			}		}		@Override		public void onLeScan(final BluetoothDevice device, int rssi,				byte[] scanRecord) {			if (!scannedDevice.contains(device)) {				scannedDevice.add(device);				Log.i(TAG,"scanned device:"+device.getName()+" "+device.getAddress());				if(device.getAddress().equals(mac)){					if(enable){						enable=false;						scanLeDevice(false);						onDeviceScanned(device);					}				}			}		}				public abstract void onDeviceScanned(final BluetoothDevice device);	}	public interface ConnectStaustListener{		void currentStatus(int status,String currentStatus);	}	private ConnectStaustListener connectStaustListener;	public void setConnectStaustListener(ConnectStaustListener listener){		this.connectStaustListener=listener;	}}